<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Dr.luck_Robot\Dr.luck_Robot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Dr.luck_Robot\Dr.luck_Robot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Jun 15 10:01:36 2017
<BR><P>
<H3>Maximum Stack Usage =       2304 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CheckOrder &rArr; ProgramToUpdateFlash &rArr; fupd_prog &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC_IRQHandler</a><BR>
 <LI><a href="#[69]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">BusFault_Handler</a><BR>
 <LI><a href="#[67]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">HardFault_Handler</a><BR>
 <LI><a href="#[68]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">MemManage_Handler</a><BR>
 <LI><a href="#[138]">scan_files</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">scan_files</a><BR>
 <LI><a href="#[6a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">UsageFault_Handler</a><BR>
 <LI><a href="#[144]">scan_all_files</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[144]">scan_all_files</a><BR>
 <LI><a href="#[286]">f_deldir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[286]">f_deldir</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">BusFault_Handler</a> from stm32fxxx_it.o(i.BusFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[83]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[84]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[85]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[82]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[af]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b0]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b1]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ae]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[be]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[bd]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[80]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a7]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a8]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a9]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[aa]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ab]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b3]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b4]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b5]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">DebugMon_Handler</a> from stm32fxxx_it.o(i.DebugMon_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ac]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ad]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[75]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[97]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[76]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[77]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[78]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[79]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[86]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c0]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9f]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[bf]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">HardFault_Handler</a> from stm32fxxx_it.o(i.HardFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8f]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8e]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[91]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[90]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b8]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b7]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">KEYBRD_Decode</a> from usbh_hid_keybd.o(i.KEYBRD_Decode) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[f]">KEYBRD_Init</a> from usbh_hid_keybd.o(i.KEYBRD_Init) referenced 2 times from usbh_hid_keybd.o(.data)
 <LI><a href="#[12]">MOUSE_Decode</a> from usbh_hid_mouse.o(i.MOUSE_Decode) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[11]">MOUSE_Init</a> from usbh_hid_mouse.o(i.MOUSE_Init) referenced 2 times from usbh_hid_mouse.o(.data)
 <LI><a href="#[68]">MemManage_Handler</a> from stm32fxxx_it.o(i.MemManage_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">NMI_Handler</a> from stm32fxxx_it.o(i.NMI_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b2]">OTG_FS_IRQHandler</a> from stm32fxxx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[99]">OTG_FS_WKUP_IRQHandler</a> from stm32fxxx_it.o(i.OTG_FS_WKUP_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ba]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b9]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[bc]">OTG_HS_IRQHandler</a> from stm32fxxx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[bb]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">OpAdd</a> from excutefunction.o(i.OpAdd) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[4b]">OpAnd</a> from excutefunction.o(i.OpAnd) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[4f]">OpAnd_2b</a> from excutefunction.o(i.OpAnd_2b) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[42]">OpChange_Byte_To_Float</a> from excutefunction.o(i.OpChange_Byte_To_Float) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[41]">OpChange_Float_To_Byte</a> from excutefunction.o(i.OpChange_Float_To_Byte) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[4a]">OpCompare</a> from excutefunction.o(i.OpCompare) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[5d]">OpDelay</a> from excutefunction.o(i.OpDelay) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[46]">OpDiv</a> from excutefunction.o(i.OpDiv) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[56]">OpDjmp</a> from excutefunction.o(i.OpDjmp) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[5e]">OpEndprogram</a> from excutefunction.o(i.OpEndprogram) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[5f]">OpGet_Time</a> from excutefunction.o(i.OpGet_Time) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[53]">OpJmp</a> from excutefunction.o(i.OpJmp) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[55]">OpJmp_False</a> from excutefunction.o(i.OpJmp_False) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[54]">OpJmp_True</a> from excutefunction.o(i.OpJmp_True) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[45]">OpMUL</a> from excutefunction.o(i.OpMUL) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[47]">OpMath</a> from excutefunction.o(i.OpMath) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[3b]">OpMov_C_Byte</a> from excutefunction.o(i.OpMov_C_Byte) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[3c]">OpMov_C_Floart</a> from excutefunction.o(i.OpMov_C_Floart) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[3f]">OpMov_C_To_R</a> from excutefunction.o(i.OpMov_C_To_R) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[3d]">OpMov_R_Byte</a> from excutefunction.o(i.OpMov_R_Byte) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[3e]">OpMov_R_Floart</a> from excutefunction.o(i.OpMov_R_Floart) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[40]">OpMov_R_To_R</a> from excutefunction.o(i.OpMov_R_To_R) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[3a]">OpNop</a> from excutefunction.o(i.OpNop) referenced 26 times from disassembly.o(.data)
 <LI><a href="#[4d]">OpNot</a> from excutefunction.o(i.OpNot) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[51]">OpNot_2b</a> from excutefunction.o(i.OpNot_2b) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[4c]">OpOr</a> from excutefunction.o(i.OpOr) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[50]">OpOr_2b</a> from excutefunction.o(i.OpOr_2b) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[49]">OpRan_b</a> from excutefunction.o(i.OpRan_b) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[48]">OpRan_f</a> from excutefunction.o(i.OpRan_f) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[63]">OpRead_Device</a> from excutefunction.o(i.OpRead_Device) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[61]">OpRead_Port</a> from excutefunction.o(i.OpRead_Port) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[60]">OpReset_Time</a> from excutefunction.o(i.OpReset_Time) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[5c]">OpStartprogram</a> from excutefunction.o(i.OpStartprogram) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[44]">OpSub</a> from excutefunction.o(i.OpSub) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[5b]">OpThread_End</a> from excutefunction.o(i.OpThread_End) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[5a]">OpThread_End_IF</a> from excutefunction.o(i.OpThread_End_IF) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[59]">OpThread_False_Start</a> from excutefunction.o(i.OpThread_False_Start) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[57]">OpThread_Start</a> from excutefunction.o(i.OpThread_Start) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[58]">OpThread_True_Start</a> from excutefunction.o(i.OpThread_True_Start) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[64]">OpWrite_Device</a> from excutefunction.o(i.OpWrite_Device) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[62]">OpWrite_Port</a> from excutefunction.o(i.OpWrite_Port) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[4e]">OpXor</a> from excutefunction.o(i.OpXor) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[52]">OpXor_2b</a> from excutefunction.o(i.OpXor_2b) referenced 2 times from disassembly.o(.data)
 <LI><a href="#[70]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">PendSV_Handler</a> from stm32fxxx_it.o(i.PendSV_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[74]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[98]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a0]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[92]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[93]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a2]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">SVC_Handler</a> from stm32fxxx_it.o(i.SVC_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">SysTick_Handler</a> from stm32fxxx_it.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c2]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[71]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[87]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8a]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[89]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[88]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8b]">TIM2_IRQHandler</a> from stm32fxxx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8c]">TIM3_IRQHandler</a> from timer3.o(i.TIM3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8d]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a1]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a5]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a6]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9d]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a3]">UART4_IRQHandler</a> from uart4.o(i.UART4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a4]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[94]">USART1_IRQHandler</a> from usart1.o(i.USART1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[95]">USART2_IRQHandler</a> from usart2.o(i.USART2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[96]">USART3_IRQHandler</a> from usart3.o(i.USART3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b6]">USART6_IRQHandler</a> from usart6.o(i.USART6_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[13]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1f]">USBD_HID_DataIn</a> from usbd_hid_core.o(i.USBD_HID_DataIn) referenced 2 times from usbd_hid_core.o(.data)
 <LI><a href="#[20]">USBD_HID_DataOut</a> from usbd_hid_core.o(i.USBD_HID_DataOut) referenced 2 times from usbd_hid_core.o(.data)
 <LI><a href="#[1d]">USBD_HID_DeInit</a> from usbd_hid_core.o(i.USBD_HID_DeInit) referenced 2 times from usbd_hid_core.o(.data)
 <LI><a href="#[21]">USBD_HID_GetCfgDesc</a> from usbd_hid_core.o(i.USBD_HID_GetCfgDesc) referenced 2 times from usbd_hid_core.o(.data)
 <LI><a href="#[1c]">USBD_HID_Init</a> from usbd_hid_core.o(i.USBD_HID_Init) referenced 2 times from usbd_hid_core.o(.data)
 <LI><a href="#[1e]">USBD_HID_Setup</a> from usbd_hid_core.o(i.USBD_HID_Setup) referenced 2 times from usbd_hid_core.o(.data)
 <LI><a href="#[1a]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[1b]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[17]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[19]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[16]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[15]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[18]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[27]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[3]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[6]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[22]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[7]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[2]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[5]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[4]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[1]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[28]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[23]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[24]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[25]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[26]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[9]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[a]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[d]">USBH_HID_ClassRequest</a> from usbh_hid_core.o(i.USBH_HID_ClassRequest) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[e]">USBH_HID_Handle</a> from usbh_hid_core.o(i.USBH_HID_Handle) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[c]">USBH_HID_InterfaceDeInit</a> from usbh_hid_core.o(i.USBH_HID_InterfaceDeInit) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[b]">USBH_HID_InterfaceInit</a> from usbh_hid_core.o(i.USBH_HID_InterfaceInit) referenced 2 times from usbh_hid_core.o(.data)
 <LI><a href="#[8]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[32]">USBH_USR_Configuration_DescAvailable</a> from usbh_usr.o(i.USBH_USR_Configuration_DescAvailable) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[2a]">USBH_USR_DeInit</a> from usbh_usr.o(i.USBH_USR_DeInit) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[31]">USBH_USR_DeviceAddressAssigned</a> from usbh_usr.o(i.USBH_USR_DeviceAddressAssigned) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[2b]">USBH_USR_DeviceAttached</a> from usbh_usr.o(i.USBH_USR_DeviceAttached) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[2d]">USBH_USR_DeviceDisconnected</a> from usbh_usr.o(i.USBH_USR_DeviceDisconnected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[38]">USBH_USR_DeviceNotSupported</a> from usbh_usr.o(i.USBH_USR_DeviceNotSupported) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[2f]">USBH_USR_DeviceSpeedDetected</a> from usbh_usr.o(i.USBH_USR_DeviceSpeedDetected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[30]">USBH_USR_Device_DescAvailable</a> from usbh_usr.o(i.USBH_USR_Device_DescAvailable) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[36]">USBH_USR_EnumerationDone</a> from usbh_usr.o(i.USBH_USR_EnumerationDone) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[29]">USBH_USR_Init</a> from usbh_usr.o(i.USBH_USR_Init) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[33]">USBH_USR_Manufacturer_String</a> from usbh_usr.o(i.USBH_USR_Manufacturer_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[2e]">USBH_USR_OverCurrentDetected</a> from usbh_usr.o(i.USBH_USR_OverCurrentDetected) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[34]">USBH_USR_Product_String</a> from usbh_usr.o(i.USBH_USR_Product_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[2c]">USBH_USR_ResetDevice</a> from usbh_usr.o(i.USBH_USR_ResetDevice) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[35]">USBH_USR_SerialNum_String</a> from usbh_usr.o(i.USBH_USR_SerialNum_String) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[39]">USBH_USR_UnrecoveredError</a> from usbh_usr.o(i.USBH_USR_UnrecoveredError) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[37]">USBH_USR_UserInput</a> from usbh_usr.o(i.USBH_USR_UserInput) referenced 2 times from usbh_usr.o(.data)
 <LI><a href="#[6a]">UsageFault_Handler</a> from stm32fxxx_it.o(i.UsageFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c3]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[c5]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[c6]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[c4]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[c9]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[ca]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[c8]">fputc</a> from usart6.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[c7]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[c1]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c3]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[37c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[cb]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[37e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[37f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[380]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[381]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[65]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[371]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Wave
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_System_Source
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Sensor_Data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Project_State
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Project_Adr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Program_Download
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MotorControl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Heartbeat_Packet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Firmware_Download
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_State
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_Path
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_File
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Order
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamData
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[382]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[383]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicPortReceive
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Reconnect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_DControl_Packet
</UL>

<P><STRONG><a name="[385]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_Path
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Receive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
</UL>

<P><STRONG><a name="[293]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diffrence_judge
</UL>

<P><STRONG><a name="[29d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Receive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_file_load
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Control_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_ButtonRespond
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_judge_key
</UL>

<P><STRONG><a name="[d0]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
</UL>

<P><STRONG><a name="[ea]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[d6]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[386]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[387]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[388]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[c4]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[389]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[38a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[dd]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[dc]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e5]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[327]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[38b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[38c]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[cc]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[38d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[38e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[e9]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[38f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[f7]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[fb]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[fa]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[f8]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[f9]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[fd]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
</UL>

<P><STRONG><a name="[eb]"></a>Abs</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, excutefunction.o(i.Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Abs &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[ef]"></a>Acos</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, excutefunction.o(i.Acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Acos &rArr; __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[f1]"></a>Adc1_Init</STRONG> (Thumb, 350 bytes, Stack size 128 bytes, adc.o(i.Adc1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Adc1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[fe]"></a>Adc3_Init</STRONG> (Thumb, 230 bytes, Stack size 128 bytes, adc.o(i.Adc3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Adc3_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[ff]"></a>Appr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, excutefunction.o(i.Appr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Appr &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[101]"></a>Asin</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, excutefunction.o(i.Asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Asin &rArr; __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[103]"></a>Atan</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, excutefunction.o(i.Atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Atan &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[10c]"></a>Battery_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, battery.o(i.Battery_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Battery_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[233]"></a>BriBt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, brickperipheral.o(i.BriBt))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[10d]"></a>BriButton</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, brickperipheral.o(i.BriButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BriButton
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Device
</UL>

<P><STRONG><a name="[10f]"></a>BriDisplay</STRONG> (Thumb, 800 bytes, Stack size 112 bytes, brickperipheral.o(i.BriDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = BriDisplay &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Rectangle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[235]"></a>BriFile</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, brickperipheral.o(i.BriFile))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[232]"></a>BriLight</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, brickperipheral.o(i.BriLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BriLight
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[234]"></a>BriMessage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, brickperipheral.o(i.BriMessage))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[11d]"></a>BriRawSensor</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, brickperipheral.o(i.BriRawSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BriRawSensor &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC3AverageValue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[120]"></a>BriSound</STRONG> (Thumb, 1216 bytes, Stack size 48 bytes, brickperipheral.o(i.BriSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = BriSound &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[122]"></a>BriTimerSensor</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, brickperipheral.o(i.BriTimerSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BriTimerSensor &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[236]"></a>BriWaveform</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, brickperipheral.o(i.BriWaveform))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
</UL>

<P><STRONG><a name="[69]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>Byte4ToFloat</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, excutefunction.o(i.Byte4ToFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Byte4ToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recharge
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSenserData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriRawSensor
</UL>

<P><STRONG><a name="[124]"></a>ChangeMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart_sensor.o(i.ChangeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSensorMode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_sensor_control
</UL>

<P><STRONG><a name="[123]"></a>ChangeSensorMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ui_control.o(i.ChangeSensorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ChangeSensorMode &rArr; ChangeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
</UL>

<P><STRONG><a name="[125]"></a>ChannelMotorCheck</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, outputworkmode.o(i.ChannelMotorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ChannelMotorCheck &rArr; FloatToByte4
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC1AverageValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoIdtoEstId
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToByte4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Rotations
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Degrees
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_CurrentPower
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>CheckOrder</STRONG> (Thumb, 1898 bytes, Stack size 80 bytes, c_protocol_1.o(i.CheckOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = CheckOrder &rArr; ProgramToUpdateFlash &rArr; fupd_prog &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_On
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Wave
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_System_Source
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Sensor_Data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Project_State
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Project_Adr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Program_Download
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MotorControl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Heartbeat_Packet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Firmware_Download
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_State
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_Path
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_File
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Order
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToFlash
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_file_load
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Func
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>Color</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, input.o(i.Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Color &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[14d]"></a>Cos</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, excutefunction.o(i.Cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Cos &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[14f]"></a>DCD_EP_Close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DeInit
</UL>

<P><STRONG><a name="[151]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[153]"></a>DCD_EP_Flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DataOut
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DataIn
</UL>

<P><STRONG><a name="[156]"></a>DCD_EP_Open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[158]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DataOut
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[2b8]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[15b]"></a>DCD_EP_Stall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[15d]"></a>DCD_EP_Tx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[168]"></a>DCD_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1af]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[f5]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Disable
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[1bd]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config
</UL>

<P><STRONG><a name="[1f1]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Disable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[203]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Movement
</UL>

<P><STRONG><a name="[1ad]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[f4]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config
</UL>

<P><STRONG><a name="[1f4]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>

<P><STRONG><a name="[6c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[377]"></a>Delay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uc1638c.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[170]"></a>Device3TimerInterrupt1</STRONG> (Thumb, 1124 bytes, Stack size 48 bytes, adc_sensor.o(i.Device3TimerInterrupt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Device3TimerInterrupt1 &rArr; FloatToByte4
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinDigital
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinAdc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoIdtoEstId
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToByte4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>ENC_CurrentPowerProcess</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, getspeed.o(i.ENC_CurrentPowerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENC_CurrentPowerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetCurrentPluse
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>ENC_GetCurrentPluse</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, getspeed.o(i.ENC_GetCurrentPluse))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SumAngleProcess
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CurrentPowerProcess
</UL>

<P><STRONG><a name="[177]"></a>ENC_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getspeed.o(i.ENC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ENC_Init &rArr; EXTIX_Init &rArr; TACHO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
</UL>

<P><STRONG><a name="[179]"></a>ENC_SumAngleProcess</STRONG> (Thumb, 156 bytes, Stack size 84 bytes, getspeed.o(i.ENC_SumAngleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ENC_SumAngleProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Runtime_PID
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_GetCurrentPluse
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>EXTIX_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, exti.o(i.EXTIX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EXTIX_Init &rArr; TACHO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TACHO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[17d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[149]"></a>EndProgram</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, c_protocol_1.o(i.EndProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EndProgram &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpEndprogram
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Running_ButtonRespond
</UL>

<P><STRONG><a name="[148]"></a>EnterProgram</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, c_protocol_1.o(i.EnterProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
</UL>

<P><STRONG><a name="[182]"></a>Equ</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, excutefunction.o(i.Equ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Equ &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[183]"></a>Exp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, excutefunction.o(i.Exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Exp &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[185]"></a>FLASH_EraseSector</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Func
</UL>

<P><STRONG><a name="[188]"></a>FLASH_GetStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[241]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Func
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[187]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[23e]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Func
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[186]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[18b]"></a>FlashBuffLoseCheck</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, c_protocol_1.o(i.FlashBuffLoseCheck))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameOrFlashBuffLoseCheck
</UL>

<P><STRONG><a name="[12b]"></a>FloatToByte4</STRONG> (Thumb, 28 bytes, Stack size 28 bytes, excutefunction.o(i.FloatToByte4))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FloatToByte4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
</UL>

<P><STRONG><a name="[18a]"></a>FrameBuffLoseCheck</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, c_protocol_1.o(i.FrameBuffLoseCheck))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameOrFlashBuffLoseCheck
</UL>

<P><STRONG><a name="[189]"></a>FrameOrFlashBuffLoseCheck</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, c_protocol_1.o(i.FrameOrFlashBuffLoseCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FrameOrFlashBuffLoseCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameBuffLoseCheck
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBuffLoseCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TACHO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IO_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GPIO_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UC1638C_GPIO_Init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_break_Init
</UL>

<P><STRONG><a name="[1c0]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[17c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinDigital
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
</UL>

<P><STRONG><a name="[173]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IO_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_break_Init
</UL>

<P><STRONG><a name="[174]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_break_Init
</UL>

<P><STRONG><a name="[11a]"></a>GetByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, excutefunction.o(i.GetByte))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[ed]"></a>GetFloat</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, excutefunction.o(i.GetFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpSub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_b
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMUL
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDjmp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDelay
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpChange_Float_To_Byte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAdd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriSound
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tan
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rej
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nequ
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Negate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lte
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inside
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inj
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
</UL>

<P><STRONG><a name="[220]"></a>GetProgramTimeMs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.GetProgramTimeMs))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDelay
</UL>

<P><STRONG><a name="[ec]"></a>GetRamBase</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, excutefunction.o(i.GetRamBase))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamData
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpXor_2b
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpXor
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpThread_True_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpThread_False_Start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpSub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Device
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_b
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpOr_2b
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpOr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpNot_2b
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpNot
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMov_R_To_R
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMov_R_Floart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMov_R_Byte
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMov_C_To_R
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMov_C_Floart
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMov_C_Byte
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMUL
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpJmp_True
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpJmp_False
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpGet_Time
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDjmp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDelay
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpChange_Float_To_Byte
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpChange_Byte_To_Float
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAnd_2b
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAdd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriSound
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tan
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rej
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nequ
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Negate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lte
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inside
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inj
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
</UL>

<P><STRONG><a name="[13e]"></a>GetRamData</STRONG> (Thumb, 176 bytes, Stack size 376 bytes, c_protocol_1.o(i.GetRamData))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = GetRamData &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[291]"></a>GetShowModeNum</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ui_control.o(i.GetShowModeNum))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
</UL>

<P><STRONG><a name="[18e]"></a>Get_HzMat</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, text.o(i.Get_HzMat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Get_HzMat &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[17a]"></a>Get_Runtime_PID</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, getspeed.o(i.Get_Runtime_PID))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SumAngleProcess
</UL>

<P><STRONG><a name="[222]"></a>Getpc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, excutefunction.o(i.Getpc))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpThread_True_Start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpThread_Start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpThread_False_Start
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpJmp_True
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpJmp_False
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpJmp
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDjmp
</UL>

<P><STRONG><a name="[190]"></a>Gt</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, excutefunction.o(i.Gt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gt &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[191]"></a>Gte</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, excutefunction.o(i.Gte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gte &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[192]"></a>Gyro</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, input.o(i.Gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gyro &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[2ce]"></a>HCD_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[2e9]"></a>HCD_GetCurrentSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetCurrentSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[2cf]"></a>HCD_GetURB_State</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_GetURB_State))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[193]"></a>HCD_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[2e8]"></a>HCD_IsDeviceConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_IsDeviceConnected))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[195]"></a>HCD_ResetPort</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb_hcd.o(i.HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HCD_ResetPort &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[197]"></a>HCD_SubmitRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_hcd.o(i.HCD_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
</UL>

<P><STRONG><a name="[18d]"></a>HID_SendBuff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.HID_SendBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Wave
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_System_Source
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Sensor_Data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Project_State
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Project_Adr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Program_Download
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_MotorControl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Heartbeat_Packet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Firmware_Download
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_State
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_Path
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_FATFS_File
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Order
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamData
</UL>

<P><STRONG><a name="[19a]"></a>HID_SendBuffToHost</STRONG> (Thumb, 48 bytes, Stack size 80 bytes, main.o(i.HID_SendBuffToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCom_DataDecode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveReply_SortUpdate_Packet
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveReply_DControl_Packet
</UL>

<P><STRONG><a name="[67]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>HostCom_DataDecode</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, cascade.o(i.HostCom_DataDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HostCom_DataDecode &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuffToHost
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_SortUpdate_Packet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Decode
</UL>

<P><STRONG><a name="[19e]"></a>HostSend_DControl_Packet</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, cascade.o(i.HostSend_DControl_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HostSend_DControl_Packet &rArr; USBH_SendData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[1a1]"></a>HostSend_DDataGet_Packet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cascade.o(i.HostSend_DDataGet_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HostSend_DDataGet_Packet &rArr; USBH_SendData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[19d]"></a>HostSend_SortUpdate_Packet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cascade.o(i.HostSend_SortUpdate_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HostSend_SortUpdate_Packet &rArr; USBH_SendData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCom_DataDecode
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveCom_DataDecode
</UL>

<P><STRONG><a name="[1aa]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1ac]"></a>I2C_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1a6]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_DMALastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1a7]"></a>I2C_GenerateSTART</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1ae]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1a8]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1a2]"></a>I2C_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1a4]"></a>I2C_ReadDeviceRegister</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, stm324xg_eval_ioe.o(i.I2C_ReadDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = I2C_ReadDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TempSens_Config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadID
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOPinConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOEdgeConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOAFConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_FnctCmd
</UL>

<P><STRONG><a name="[1a9]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1ab]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1b0]"></a>I2C_WriteDeviceRegister</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, stm324xg_eval_ioe.o(i.I2C_WriteDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_WriteIOPin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TempSens_Config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Reset
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOPinConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOEdgeConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOAFConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_FnctCmd
</UL>

<P><STRONG><a name="[1b1]"></a>IIC_Init</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, iic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[1b2]"></a>IOE_Config</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = IOE_Config &rArr; IOE_IsOperational &rArr; IOE_ReadID &rArr; I2C_ReadDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_WriteIOPin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TempSens_Config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Reset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IsOperational
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOPinConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOEdgeConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IOAFConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_FnctCmd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_Init
</UL>

<P><STRONG><a name="[1b6]"></a>IOE_FnctCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_FnctCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IOE_FnctCmd &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1b8]"></a>IOE_IOAFConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_IOAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IOE_IOAFConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1ba]"></a>IOE_IOEdgeConfig</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_IOEdgeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = IOE_IOEdgeConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1b7]"></a>IOE_IOPinConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_IOPinConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IOE_IOPinConfig &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1b4]"></a>IOE_IsOperational</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_IsOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = IOE_IsOperational &rArr; IOE_ReadID &rArr; I2C_ReadDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1c1]"></a>IOE_ReadID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm324xg_eval_ioe.o(i.IOE_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IOE_ReadID &rArr; I2C_ReadDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_IsOperational
</UL>

<P><STRONG><a name="[1b5]"></a>IOE_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IOE_Reset &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1bb]"></a>IOE_TS_Config</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_TS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IOE_TS_Config &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1bc]"></a>IOE_TempSens_Config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_TempSens_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IOE_TempSens_Config &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1b9]"></a>IOE_WriteIOPin</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm324xg_eval_ioe.o(i.IOE_WriteIOPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IOE_WriteIOPin &rArr; I2C_WriteDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[370]"></a>IicPortSend</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, iic_sensor.o(i.IicPortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IicPortSend
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[376]"></a>IicReadSda</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, iic_sensor.o(i.IicReadSda))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_flag_handler
</UL>

<P><STRONG><a name="[372]"></a>IicScl</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, iic_sensor.o(i.IicScl))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_flag_handler
</UL>

<P><STRONG><a name="[373]"></a>IicSda</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, iic_sensor.o(i.IicSda))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_flag_handler
</UL>

<P><STRONG><a name="[375]"></a>IicSdaIn</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, iic_sensor.o(i.IicSdaIn))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_flag_handler
</UL>

<P><STRONG><a name="[374]"></a>IicSdaOut</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, iic_sensor.o(i.IicSdaOut))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_flag_handler
</UL>

<P><STRONG><a name="[1c4]"></a>Infrared</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, input.o(i.Infrared))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Infrared &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[1c5]"></a>Inj</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, excutefunction.o(i.Inj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Inj &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[1c7]"></a>Input_init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, input.o(i.Input_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Input_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[1c8]"></a>Inside</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, excutefunction.o(i.Inside))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Inside &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[1cb]"></a>KEY_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[1cc]"></a>KEY_Scan</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ShiBie_long
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ShiBie_down
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_ShiBie
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>KEY_ShiBie</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, key.o(i.KEY_ShiBie))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[1ce]"></a>KEY_ShiBie_down</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, key.o(i.KEY_ShiBie_down))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[1cd]"></a>KEY_ShiBie_long</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, key.o(i.KEY_ShiBie_long))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[119]"></a>LCD_Display_pic</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, uc1638c.o(i.LCD_Display_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Shutdown_Display
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_Display
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_Display
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showusartname1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showusartname
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSensorPicture
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSensorMode
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Interface
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotificationBar
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooch_waiting
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[115]"></a>LCD_DrawPoint</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uc1638c.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[113]"></a>LCD_Draw_Circle</STRONG> (Thumb, 342 bytes, Stack size 60 bytes, uc1638c.o(i.LCD_Draw_Circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[112]"></a>LCD_Draw_Line</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, uc1638c.o(i.LCD_Draw_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Draw_Line &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Rectangle
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[114]"></a>LCD_Draw_Rectangle</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, uc1638c.o(i.LCD_Draw_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_Draw_Rectangle &rArr; LCD_Draw_Line &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[1d1]"></a>LCD_Getcolor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uc1638c.o(i.LCD_Getcolor))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
</UL>

<P><STRONG><a name="[1d0]"></a>LCD_Invert</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uc1638c.o(i.LCD_Invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Invert &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Getcolor
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_Display
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_respond
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooch_waiting
</UL>

<P><STRONG><a name="[1d2]"></a>LCD_ShowChar</STRONG> (Thumb, 168 bytes, Stack size 52 bytes, uc1638c.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[11c]"></a>LCD_ShowFloat</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uc1638c.o(i.LCD_ShowFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_ShowFloat &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSenserData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[11b]"></a>LCD_ShowNum</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, uc1638c.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSenserData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[18f]"></a>LCD_ShowString</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, uc1638c.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_Display
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showusartname1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showusartname
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSensorMode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooch_waiting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloat
</UL>

<P><STRONG><a name="[1d6]"></a>LCD_UC1638C_GPIO_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, uc1638c.o(i.LCD_UC1638C_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_UC1638C_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UC1638C_Init
</UL>

<P><STRONG><a name="[1d7]"></a>LCD_UC1638C_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uc1638c.o(i.LCD_UC1638C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_UC1638C_Init &rArr; LCD_UC1638C_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UC1638C_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Control_Init
</UL>

<P><STRONG><a name="[110]"></a>LCD_clear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uc1638c.o(i.LCD_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Control_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Interface
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[1d9]"></a>LCD_refresh</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uc1638c.o(i.LCD_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_refresh &rArr; set_uc1638c_Addr &rArr; iic_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uc1638c_Addr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Device
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[1de]"></a>Large_Motor_Off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, outputworkmode.o(i.Large_Motor_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Large_Motor_Off &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[13f]"></a>Large_Motor_On</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, outputworkmode.o(i.Large_Motor_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Large_Motor_On &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1e0]"></a>Large_Motor_OnForDegrees</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, outputworkmode.o(i.Large_Motor_OnForDegrees))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Large_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForRotations
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForDegrees
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForRotations
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForDegrees
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Movement
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1e2]"></a>Large_Motor_OnForRotations</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, outputworkmode.o(i.Large_Motor_OnForRotations))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Large_Motor_OnForRotations &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1e3]"></a>Large_Motor_OnForSecond</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, outputworkmode.o(i.Large_Motor_OnForSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Large_Motor_OnForSecond &rArr; Motor_OnForSecond &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForSecond
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForSecond
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[128]"></a>LegoIdtoEstId</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, input.o(i.LegoIdtoEstId))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
</UL>

<P><STRONG><a name="[294]"></a>LegoModetoEstMode</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, input.o(i.LegoModetoEstMode))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
</UL>

<P><STRONG><a name="[1e5]"></a>LightControl</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, main.o(i.LightControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LightControl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDToggle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>Ln</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, excutefunction.o(i.Ln))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Ln &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[1eb]"></a>Log</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, excutefunction.o(i.Log))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Log &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[1ed]"></a>Lt</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, excutefunction.o(i.Lt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lt &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[1ee]"></a>Lte</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, excutefunction.o(i.Lte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lte &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[1f0]"></a>MYDMA_Config</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, spi3.o(i.MYDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MYDMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[1f2]"></a>MYDMA_Disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi3.o(i.MYDMA_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MYDMA_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
</UL>

<P><STRONG><a name="[1f3]"></a>MYDMA_Enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi3.o(i.MYDMA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MYDMA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buffer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Movement
</UL>

<P><STRONG><a name="[1f5]"></a>Meduim_Motor_Off</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, outputworkmode.o(i.Meduim_Motor_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Meduim_Motor_Off &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1f6]"></a>Meduim_Motor_On</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, outputworkmode.o(i.Meduim_Motor_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Meduim_Motor_On &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1f7]"></a>Meduim_Motor_OnForDegrees</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, outputworkmode.o(i.Meduim_Motor_OnForDegrees))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Meduim_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Movement
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1f8]"></a>Meduim_Motor_OnForRotations</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, outputworkmode.o(i.Meduim_Motor_OnForRotations))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Meduim_Motor_OnForRotations &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[1f9]"></a>Meduim_Motor_OnForSecond</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, outputworkmode.o(i.Meduim_Motor_OnForSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Meduim_Motor_OnForSecond &rArr; Motor_OnForSecond &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>

<P><STRONG><a name="[68]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1fa]"></a>Mod</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, excutefunction.o(i.Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Mod &rArr; __hardfp_fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[1fc]"></a>Motor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, input.o(i.Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[379]"></a>MotorRunTime_Check</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, outputworkmode.o(i.MotorRunTime_Check))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>Motor_CurrentPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, outputworkmode.o(i.Motor_CurrentPower))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
</UL>

<P><STRONG><a name="[129]"></a>Motor_Degrees</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, outputworkmode.o(i.Motor_Degrees))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
</UL>

<P><STRONG><a name="[14a]"></a>Motor_DirectionSet</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, pwm.o(i.Motor_DirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_On
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForSecond
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForRotations
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForDegrees
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_On
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_Off
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForSecond
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForRotations
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForDegrees
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_On
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_Off
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForSecond
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_On
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_Off
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_Off
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Running_ButtonRespond
</UL>

<P><STRONG><a name="[202]"></a>Motor_Movement</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, test.o(i.Motor_Movement))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Motor_Movement &rArr; Meduim_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForDegrees
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>Motor_OnForDegrees</STRONG> (Thumb, 836 bytes, Stack size 80 bytes, outputworkmode.o(i.Motor_OnForDegrees))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForRotations
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForDegrees
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForRotations
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
</UL>

<P><STRONG><a name="[1e4]"></a>Motor_OnForSecond</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, outputworkmode.o(i.Motor_OnForSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_OnForSecond &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForSecond
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForSecond
</UL>

<P><STRONG><a name="[12c]"></a>Motor_PowerSet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pwm.o(i.Motor_PowerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_On
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unregulated_Motor_On
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_On
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_Off
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_On
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_Off
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForSecond
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_On
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_Off
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_Off
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
</UL>

<P><STRONG><a name="[1fd]"></a>Motor_Reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, outputworkmode.o(i.Motor_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor
</UL>

<P><STRONG><a name="[12a]"></a>Motor_Rotations</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, outputworkmode.o(i.Motor_Rotations))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
</UL>

<P><STRONG><a name="[204]"></a>Move_Steering_Off</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, outputworkmode.o(i.Move_Steering_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Move_Steering_Off &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[205]"></a>Move_Steering_On</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, outputworkmode.o(i.Move_Steering_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Move_Steering_On &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[206]"></a>Move_Steering_OnForDegrees</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, outputworkmode.o(i.Move_Steering_OnForDegrees))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Move_Steering_OnForDegrees &rArr; Large_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[207]"></a>Move_Steering_OnForRotations</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, outputworkmode.o(i.Move_Steering_OnForRotations))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Move_Steering_OnForRotations &rArr; Large_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[208]"></a>Move_Steering_OnForSecond</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, outputworkmode.o(i.Move_Steering_OnForSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Move_Steering_OnForSecond &rArr; Large_Motor_OnForSecond &rArr; Motor_OnForSecond &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[209]"></a>Move_Tank_Off</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, outputworkmode.o(i.Move_Tank_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Move_Tank_Off &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[20a]"></a>Move_Tank_On</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, outputworkmode.o(i.Move_Tank_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Move_Tank_On &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[20b]"></a>Move_Tank_OnForDegrees</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, outputworkmode.o(i.Move_Tank_OnForDegrees))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Move_Tank_OnForDegrees &rArr; Large_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[20c]"></a>Move_Tank_OnForRotations</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, outputworkmode.o(i.Move_Tank_OnForRotations))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Move_Tank_OnForRotations &rArr; Large_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[20d]"></a>Move_Tank_OnForSecond</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, outputworkmode.o(i.Move_Tank_OnForSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Move_Tank_OnForSecond &rArr; Large_Motor_OnForSecond &rArr; Motor_OnForSecond &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[20e]"></a>Mp3Reset</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, vs10xx.o(i.Mp3Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mp3Reset &rArr; wr_command &rArr; SPI3_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[212]"></a>Mp3_GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, vs10xx.o(i.Mp3_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Mp3_GPIO_Init &rArr; SPI3_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[66]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[2ee]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[2ef]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[214]"></a>Negate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, excutefunction.o(i.Negate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Negate &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[215]"></a>Nequ</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, excutefunction.o(i.Nequ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Nequ &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[216]"></a>NotificationBar</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ui_control.o(i.NotificationBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NotificationBar &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC3AverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[b2]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32fxxx_it.o(i.OTG_FS_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OTG_FS_WKUP_IRQHandler &rArr; SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_UngateClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OTG_HS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OpAdd</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, excutefunction.o(i.OpAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpAdd &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>OpAnd</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, excutefunction.o(i.OpAnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpAnd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>OpAnd_2b</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, excutefunction.o(i.OpAnd_2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OpAnd_2b &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>OpChange_Byte_To_Float</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, excutefunction.o(i.OpChange_Byte_To_Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpChange_Byte_To_Float &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>OpChange_Float_To_Byte</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, excutefunction.o(i.OpChange_Float_To_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpChange_Float_To_Byte &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>OpCompare</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, excutefunction.o(i.OpCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OpCompare &rArr; Select &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nequ
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lte
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gte
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Equ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>OpDelay</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, excutefunction.o(i.OpDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OpDelay &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProgramTimeMs
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>OpDiv</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, excutefunction.o(i.OpDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpDiv &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>OpDjmp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, excutefunction.o(i.OpDjmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpDjmp &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>OpEndprogram</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, excutefunction.o(i.OpEndprogram))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OpEndprogram &rArr; EndProgram &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>OpGet_Time</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, excutefunction.o(i.OpGet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OpGet_Time &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>OpJmp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, excutefunction.o(i.OpJmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OpJmp
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>OpJmp_False</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, excutefunction.o(i.OpJmp_False))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OpJmp_False
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>OpJmp_True</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, excutefunction.o(i.OpJmp_True))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OpJmp_True
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>OpMUL</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, excutefunction.o(i.OpMUL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpMUL &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>OpMath</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, excutefunction.o(i.OpMath))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = OpMath &rArr; Trun &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tan
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rej
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Negate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inside
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inj
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>OpMov_C_Byte</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, excutefunction.o(i.OpMov_C_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OpMov_C_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>OpMov_C_Floart</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, excutefunction.o(i.OpMov_C_Floart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpMov_C_Floart
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>OpMov_C_To_R</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, excutefunction.o(i.OpMov_C_To_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpMov_C_To_R
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>OpMov_R_Byte</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, excutefunction.o(i.OpMov_R_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OpMov_R_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>OpMov_R_Floart</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, excutefunction.o(i.OpMov_R_Floart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpMov_R_Floart
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>OpMov_R_To_R</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, excutefunction.o(i.OpMov_R_To_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OpMov_R_To_R
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>OpNop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, excutefunction.o(i.OpNop))
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>OpNot</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, excutefunction.o(i.OpNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OpNot
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>OpNot_2b</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, excutefunction.o(i.OpNot_2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OpNot_2b
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>OpOr</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, excutefunction.o(i.OpOr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpOr
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>OpOr_2b</STRONG> (Thumb, 206 bytes, Stack size 36 bytes, excutefunction.o(i.OpOr_2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OpOr_2b
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>OpRan_b</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, excutefunction.o(i.OpRan_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OpRan_b &rArr; RNG_Get_RandomRange &rArr; RNG_Get_RandomNum
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>OpRan_f</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, excutefunction.o(i.OpRan_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OpRan_f &rArr; RNG_Get_RandomRange &rArr; RNG_Get_RandomNum
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>OpRead_Device</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, excutefunction.o(i.OpRead_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OpRead_Device &rArr; BriButton
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriButton
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>OpRead_Port</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, excutefunction.o(i.OpRead_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OpRead_Port &rArr; HostSend_DDataGet_Packet &rArr; USBH_SendData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recharge
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_DDataGet_Packet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>OpReset_Time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, excutefunction.o(i.OpReset_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OpReset_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>OpStartprogram</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, excutefunction.o(i.OpStartprogram))
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>OpSub</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, excutefunction.o(i.OpSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpSub &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>OpThread_End</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, excutefunction.o(i.OpThread_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OpThread_End
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>OpThread_End_IF</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, excutefunction.o(i.OpThread_End_IF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OpThread_End_IF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>OpThread_False_Start</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, excutefunction.o(i.OpThread_False_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OpThread_False_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>OpThread_Start</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, excutefunction.o(i.OpThread_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OpThread_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>OpThread_True_Start</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, excutefunction.o(i.OpThread_True_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OpThread_True_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getpc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>OpWrite_Device</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, excutefunction.o(i.OpWrite_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = OpWrite_Device &rArr; BriDisplay &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriWaveform
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriTimerSensor
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriSound
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriRawSensor
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriMessage
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriLight
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriFile
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriBt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>OpWrite_Port</STRONG> (Thumb, 1354 bytes, Stack size 64 bytes, excutefunction.o(i.OpWrite_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OpWrite_Port &rArr; Move_Steering_OnForRotations &rArr; Large_Motor_OnForDegrees &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_On
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unregulated_Motor_On
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForSecond
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForRotations
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_OnForDegrees
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_On
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_Off
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForSecond
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForRotations
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_OnForDegrees
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_On
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_Off
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForSecond
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForRotations
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForDegrees
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_On
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_Off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForSecond
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForRotations
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_Off
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_DControl_Packet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>OpXor</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, excutefunction.o(i.OpXor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpXor
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>OpXor_2b</STRONG> (Thumb, 206 bytes, Stack size 36 bytes, excutefunction.o(i.OpXor_2b))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OpXor_2b
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disassembly.o(.data)
</UL>
<P><STRONG><a name="[238]"></a>Output_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, outputworkmode.o(i.Output_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Output_Init &rArr; PWM_Init &rArr; TIM4_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[229]"></a>Outside</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, excutefunction.o(i.Outside))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Outside &rArr; GetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[282]"></a>PICTURE_ButtonRespond</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ui_control.o(i.PICTURE_ButtonRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PICTURE_ButtonRespond
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[1df]"></a>PID_AbsoluteMode2</STRONG> (Thumb, 470 bytes, Stack size 12 bytes, optimizepid.o(i.PID_AbsoluteMode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PID_AbsoluteMode2
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_On
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Tank_On
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Steering_On
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForSecond
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_OnForDegrees
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_On
</UL>

<P><STRONG><a name="[23a]"></a>POWER_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, power.o(i.POWER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = POWER_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[23b]"></a>PWM_IO_Init</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pwm.o(i.PWM_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PWM_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[239]"></a>PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PWM_Init &rArr; TIM4_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
</UL>

<P><STRONG><a name="[6d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>PortPinAdc</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, adc_sensor.o(i.PortPinAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PortPinAdc &rArr; ReadADC3AverageValue
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC3AverageValue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC1AverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
</UL>

<P><STRONG><a name="[171]"></a>PortPinDigital</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, adc_sensor.o(i.PortPinDigital))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PortPinDigital
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
</UL>

<P><STRONG><a name="[227]"></a>Pow</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, excutefunction.o(i.Pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pow &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[136]"></a>ProgramToFlash</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, c_protocol_1.o(i.ProgramToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = ProgramToFlash &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[13a]"></a>ProgramToUpdateFlash</STRONG> (Thumb, 298 bytes, Stack size 2080 bytes, c_protocol_1.o(i.ProgramToUpdateFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = ProgramToUpdateFlash &rArr; fupd_prog &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fupd_prog
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[f2]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_DMA_Config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TACHO_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IO_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GPIO_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UC1638C_GPIO_Init
</UL>

<P><STRONG><a name="[246]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Check_EnumeDead
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Reconnect
</UL>

<P><STRONG><a name="[1be]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[1bf]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
</UL>

<P><STRONG><a name="[f3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_break_Init
</UL>

<P><STRONG><a name="[24a]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1a3]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[219]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[21c]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>RCC_HSEConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[21b]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>RNG_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
</UL>

<P><STRONG><a name="[243]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[244]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[242]"></a>RNG_Get_RandomNum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rng.o(i.RNG_Get_RandomNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_Get_RandomNum
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
</UL>

<P><STRONG><a name="[22a]"></a>RNG_Get_RandomRange</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rng.o(i.RNG_Get_RandomRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RNG_Get_RandomRange &rArr; RNG_Get_RandomNum
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_b
</UL>

<P><STRONG><a name="[245]"></a>RNG_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rng.o(i.RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[126]"></a>ReadADC1AverageValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc.o(i.ReadADC1AverageValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadADC1AverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinAdc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
</UL>

<P><STRONG><a name="[11f]"></a>ReadADC3AverageValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc.o(i.ReadADC3AverageValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadADC3AverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortPinAdc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotificationBar
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriRawSensor
</UL>

<P><STRONG><a name="[22f]"></a>Recharge</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, input.o(i.Recharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Recharge &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[223]"></a>Rej</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, excutefunction.o(i.Rej))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rej &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[248]"></a>Running_Interface</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui_control.o(i.Running_Interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Running_Interface &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[249]"></a>SPI1_Init</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[24d]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[251]"></a>SPI1_SetSpeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.SPI1_SetSpeed))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[213]"></a>SPI3_Init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, spi3.o(i.SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPI3_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GPIO_Init
</UL>

<P><STRONG><a name="[211]"></a>SPI3_ReadWriteByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi3.o(i.SPI3_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_command
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
</UL>

<P><STRONG><a name="[252]"></a>SPI3_SetSpeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi3.o(i.SPI3_SetSpeed))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_WR_Cmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[24c]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_SetSpeed
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[28b]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[253]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[24e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>

<P><STRONG><a name="[250]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>

<P><STRONG><a name="[24f]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>

<P><STRONG><a name="[24b]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
</UL>

<P><STRONG><a name="[255]"></a>STMFLASH_Read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[254]"></a>STMFLASH_Write</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, flash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Write
</UL>

<P><STRONG><a name="[23f]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, flash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[256]"></a>STM_EVAL_LEDInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm324xg_eval.o(i.STM_EVAL_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM_EVAL_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[1e7]"></a>STM_EVAL_LEDOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm324xg_eval.o(i.STM_EVAL_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DataOut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightControl
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
</UL>

<P><STRONG><a name="[1e6]"></a>STM_EVAL_LEDOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm324xg_eval.o(i.STM_EVAL_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DataOut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightControl
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
</UL>

<P><STRONG><a name="[1e8]"></a>STM_EVAL_LEDToggle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm324xg_eval.o(i.STM_EVAL_LEDToggle))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightControl
</UL>

<P><STRONG><a name="[257]"></a>STM_EVAL_PBInit</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, stm324xg_eval.o(i.STM_EVAL_PBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STM_EVAL_PBInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Init
</UL>

<P><STRONG><a name="[6b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_GPIO_Config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[21f]"></a>Select</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, excutefunction.o(i.Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Select &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpCompare
</UL>

<P><STRONG><a name="[258]"></a>SelectSensorMode</STRONG> (Thumb, 1274 bytes, Stack size 40 bytes, ui_control.o(i.SelectSensorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SelectSensorMode &rArr; Showusartname1 &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showusartname1
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
</UL>

<P><STRONG><a name="[25a]"></a>SelectSensorPicture</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, ui_control.o(i.SelectSensorPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SelectSensorPicture &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
</UL>

<P><STRONG><a name="[12f]"></a>Send_Error_Order</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_Error_Order))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Send_Error_Order &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[146]"></a>Send_FATFS_File</STRONG> (Thumb, 162 bytes, Stack size 1048 bytes, c_protocol_1.o(i.Send_FATFS_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = Send_FATFS_File &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[145]"></a>Send_FATFS_Path</STRONG> (Thumb, 182 bytes, Stack size 152 bytes, c_protocol_1.o(i.Send_FATFS_Path))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Send_FATFS_Path &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[142]"></a>Send_FATFS_State</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_FATFS_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Send_FATFS_State &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[13b]"></a>Send_Firmware_Download</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_Firmware_Download))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Send_Firmware_Download &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[12e]"></a>Send_Heartbeat_Packet</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_Heartbeat_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Send_Heartbeat_Packet &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[140]"></a>Send_MotorControl</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, c_protocol_1.o(i.Send_MotorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Send_MotorControl &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[135]"></a>Send_Program_Download</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_Program_Download))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Send_Program_Download &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[14b]"></a>Send_Project_Adr</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_Project_Adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Send_Project_Adr &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[147]"></a>Send_Project_State</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, c_protocol_1.o(i.Send_Project_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Send_Project_State &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[130]"></a>Send_Sensor_Data</STRONG> (Thumb, 158 bytes, Stack size 216 bytes, c_protocol_1.o(i.Send_Sensor_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Send_Sensor_Data &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[131]"></a>Send_System_Source</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, c_protocol_1.o(i.Send_System_Source))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Send_System_Source &rArr; mf_showfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[13d]"></a>Send_Wave</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, c_protocol_1.o(i.Send_Wave))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Send_Wave &rArr; HID_SendBuff &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[10e]"></a>SetByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, excutefunction.o(i.SetByte))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriButton
</UL>

<P><STRONG><a name="[ee]"></a>SetFloat</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, excutefunction.o(i.SetFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpSub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRan_f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMUL
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpGet_Time
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDjmp
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDiv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpChange_Byte_To_Float
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAdd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recharge
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriTimerSensor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriRawSensor
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tan
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rej
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Negate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inj
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atan
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
</UL>

<P><STRONG><a name="[25d]"></a>ShowSenserData</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ui_control.o(i.ShowSenserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ShowSenserData &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
</UL>

<P><STRONG><a name="[25e]"></a>Show_Font</STRONG> (Thumb, 158 bytes, Stack size 112 bytes, text.o(i.Show_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Show_Font &rArr; Get_HzMat &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[111]"></a>Show_Str</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, text.o(i.Show_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_Display
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[25f]"></a>Showusartname</STRONG> (Thumb, 830 bytes, Stack size 24 bytes, ui_control.o(i.Showusartname))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Showusartname &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
</UL>

<P><STRONG><a name="[259]"></a>Showusartname1</STRONG> (Thumb, 1354 bytes, Stack size 32 bytes, ui_control.o(i.Showusartname1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Showusartname1 &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSensorMode
</UL>

<P><STRONG><a name="[225]"></a>Sin</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, excutefunction.o(i.Sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sin &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[261]"></a>SlaveCom_DataDecode</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, cascade.o(i.SlaveCom_DataDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SlaveCom_DataDecode &rArr; SlaveReply_SortUpdate_Packet &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendData
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveReply_SortUpdate_Packet
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_SortUpdate_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[263]"></a>SlaveReply_DControl_Packet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cascade.o(i.SlaveReply_DControl_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SlaveReply_DControl_Packet &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuffToHost
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_daisy_Chain
</UL>

<P><STRONG><a name="[262]"></a>SlaveReply_SortUpdate_Packet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cascade.o(i.SlaveReply_SortUpdate_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SlaveReply_SortUpdate_Packet &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuffToHost
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveCom_DataDecode
</UL>

<P><STRONG><a name="[264]"></a>Sleephandle</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.Sleephandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sleephandle
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>Sound</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, input.o(i.Sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sound &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[266]"></a>SoundPlay</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, main.o(i.SoundPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SoundPlay &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buffer
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>Sqrt</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, excutefunction.o(i.Sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sqrt &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[6e]"></a>SysTick_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; iic_flag_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_flag_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>SystemInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[17e]"></a>TACHO_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, exti.o(i.TACHO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TACHO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[8b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler &rArr; USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer3.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>TIM3_Int_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timer3.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[23c]"></a>TIM4_PWM_Init</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, pwm.o(i.TIM4_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TIM4_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[10b]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[10a]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[26d]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_TimerIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[26f]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[270]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[271]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[272]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[273]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[274]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[275]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[276]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[1fe]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[201]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[200]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[1ff]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[109]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[226]"></a>Tan</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, excutefunction.o(i.Tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Tan &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[22c]"></a>Temperature</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, input.o(i.Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Temperature &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[278]"></a>Test_Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, flash.o(i.Test_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Test_Write &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_Func
</UL>

<P><STRONG><a name="[22d]"></a>Touch</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, input.o(i.Touch))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[228]"></a>Trun</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, excutefunction.o(i.Trun))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Trun &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRamBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpMath
</UL>

<P><STRONG><a name="[a3]"></a>UART4_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart4.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27c]"></a>UI_ButtonrRespond</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ui_control.o(i.UI_ButtonrRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = UI_ButtonrRespond &rArr; UI_Confirm_ButtonRespond &rArr; f_deldir &rArr;  f_deldir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Shutdown_ButtonRespond
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Running_ButtonRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_ButtonRespond
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICTURE_ButtonRespond
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotificationBar
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooch_waiting
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[283]"></a>UI_Confirm_ButtonRespond</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ui_control.o(i.UI_Confirm_ButtonRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = UI_Confirm_ButtonRespond &rArr; f_deldir &rArr;  f_deldir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_file_load
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[287]"></a>UI_Confirm_Display</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ui_control.o(i.UI_Confirm_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UI_Confirm_Display &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[288]"></a>UI_Control_Init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ui_control.o(i.UI_Control_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = UI_Control_Init &rArr; scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_file_load
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UC1638C_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[27e]"></a>UI_Main_ButtonrRespond</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, ui_control.o(i.UI_Main_ButtonrRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_file_load
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_Display
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[289]"></a>UI_Main_Display</STRONG> (Thumb, 1522 bytes, Stack size 48 bytes, ui_control.o(i.UI_Main_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[281]"></a>UI_Running_ButtonRespond</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ui_control.o(i.UI_Running_ButtonRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UI_Running_ButtonRespond &rArr; EndProgram &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DirectionSet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[280]"></a>UI_Shutdown_ButtonRespond</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ui_control.o(i.UI_Shutdown_ButtonRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UI_Shutdown_ButtonRespond
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[28a]"></a>UI_Shutdown_Display</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ui_control.o(i.UI_Shutdown_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UI_Shutdown_Display &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[27f]"></a>UI_Sub_ButtonrRespond</STRONG> (Thumb, 3680 bytes, Stack size 40 bytes, ui_control.o(i.UI_Sub_ButtonrRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = UI_Sub_ButtonrRespond &rArr; bluetooth_respond &rArr; bluetooth_judge_key &rArr; UI_Update &rArr; UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDToggle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inversion_file_load
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_Off
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Disable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GPIO_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShowModeNum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSensorMode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_respond
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[292]"></a>UI_Sub_Display</STRONG> (Thumb, 5540 bytes, Stack size 120 bytes, ui_control.o(i.UI_Sub_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = UI_Sub_Display &rArr; mf_showfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoModetoEstMode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Showusartname
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSenserData
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSensorPicture
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSensorMode
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Interface
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShowModeNum
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
</UL>

<P><STRONG><a name="[295]"></a>UI_Test</STRONG> (Thumb, 3056 bytes, Stack size 96 bytes, test.o(i.UI_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = UI_Test &rArr; mf_showfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC3AverageValue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC1AverageValue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloat
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d]"></a>UI_Update</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ui_control.o(i.UI_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = UI_Update &rArr; UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Shutdown_Display
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_Display
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_Display
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Running_Interface
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_judge_key
</UL>

<P><STRONG><a name="[284]"></a>UI_connecting_BluetoothRespond</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, ui_control.o(i.UI_connecting_BluetoothRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UI_connecting_BluetoothRespond &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotificationBar
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diffrence_judge
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[94]"></a>USART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[297]"></a>USART1_Send_Byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart1.o(i.USART1_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPortSend
</UL>

<P><STRONG><a name="[95]"></a>USART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29a]"></a>USART2_Send_Byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart2.o(i.USART2_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPortSend
</UL>

<P><STRONG><a name="[96]"></a>USART3_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29b]"></a>USART3_Send_Byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart3.o(i.USART3_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPortSend
</UL>

<P><STRONG><a name="[29c]"></a>USART4_Send_Byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart4.o(i.USART4_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART4_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPortSend
</UL>

<P><STRONG><a name="[b6]"></a>USART6_IRQHandler</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, usart6.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = USART6_IRQHandler &rArr; bluetooth_msg &rArr; UI_Update &rArr; UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29f]"></a>USART6_Receive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart6.o(i.USART6_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART6_Receive &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
</UL>

<P><STRONG><a name="[337]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
</UL>

<P><STRONG><a name="[27a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[37a]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_change
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_change
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_change
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_change
</UL>

<P><STRONG><a name="[298]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Byte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Send_Byte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send_Byte
</UL>

<P><STRONG><a name="[279]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[37b]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[2a0]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_change
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_change
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_change
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_change
</UL>

<P><STRONG><a name="[27b]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Byte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Send_Byte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send_Byte
</UL>

<P><STRONG><a name="[2b2]"></a>USBD_ClrCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[378]"></a>USBD_ConnectionCheck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.USBD_ConnectionCheck))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a1]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[2a2]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[2a3]"></a>USBD_CtlError</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2a4]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[2a5]"></a>USBD_CtlSendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2a6]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[2b9]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[199]"></a>USBD_HID_SendReport</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_hid_core.o(i.USBD_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuff
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendBuffToHost
</UL>

<P><STRONG><a name="[2a8]"></a>USBD_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_Init &rArr; DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[217]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[2b0]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_ParseSetupRequest &rArr; SlaveCom_DataDecode &rArr; SlaveReply_SortUpdate_Packet &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveCom_DataDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[2b3]"></a>USBD_SetCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[2b5]"></a>USBD_StdDevReq</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[2b7]"></a>USBD_StdEPReq</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[2b6]"></a>USBD_StdItfReq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[27]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_USR_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBD_USR_Init &rArr; IOE_Config &rArr; IOE_IsOperational &rArr; IOE_ReadID &rArr; I2C_ReadDeviceRegister &rArr; IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2d1]"></a>USBH_Alloc_Channel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbh_hcs.o(i.USBH_Alloc_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_Alloc_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[2ba]"></a>USBH_BulkSendData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_BulkSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[2bb]"></a>USBH_Check_EnumeDead</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_Check_EnumeDead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_Check_EnumeDead &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Connect_Check
</UL>

<P><STRONG><a name="[2c1]"></a>USBH_Check_HIDCommDead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_Check_HIDCommDead))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Connect_Check
</UL>

<P><STRONG><a name="[2bd]"></a>USBH_ClrFeature</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[2bf]"></a>USBH_Connect_Check</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.USBH_Connect_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_Connect_Check &rArr; USBH_HID_Reconnect &rArr; USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Check_HIDCommDead
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Check_EnumeDead
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Reconnect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>USBH_Connected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[2c3]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_CtlReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[2be]"></a>USBH_CtlReq</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usbh_ioreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendHalfWord
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[2c4]"></a>USBH_CtlSendData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[2c5]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_CtlSendSetup &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[2eb]"></a>USBH_DeAllocate_AllChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_DeAllocate_AllChannel))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[2c2]"></a>USBH_DeInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Reconnect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Connect_Check
</UL>

<P><STRONG><a name="[a]"></a>USBH_Disconnected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Disconnected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[2ea]"></a>USBH_ErrorHandle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_ErrorHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_ErrorHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[2c6]"></a>USBH_Free_Channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_hcs.o(i.USBH_Free_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[2c7]"></a>USBH_GetDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[2e5]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[2c8]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, usbh_stdreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[2ca]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[2cb]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbh_stdreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[2c0]"></a>USBH_HID_Reconnect</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, main.o(i.USBH_HID_Reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBH_HID_Reconnect &rArr; USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Connect_Check
</UL>

<P><STRONG><a name="[2d4]"></a>USBH_HandleControl</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[2d3]"></a>USBH_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBH_Init &rArr; HCD_Init &rArr; USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Reconnect
</UL>

<P><STRONG><a name="[2cd]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_ioreq.o(i.USBH_InterruptReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
</UL>

<P><STRONG><a name="[2d6]"></a>USBH_Modify_Channel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbh_hcs.o(i.USBH_Modify_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_Modify_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[21e]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>USBH_Open_Channel</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbh_hcs.o(i.USBH_Open_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[2e7]"></a>USBH_Process</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeAllocate_AllChannel
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_IsDeviceConnected
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentSpeed
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ErrorHandle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>USBH_SOF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[1a0]"></a>USBH_SendData</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_SendData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveCom_DataDecode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_SortUpdate_Packet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_DDataGet_Packet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostSend_DControl_Packet
</UL>

<P><STRONG><a name="[2ec]"></a>USBH_SendDataProcess</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, usbh_hid_core.o(i.USBH_SendDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBH_SendDataProcess &rArr; USBH_SendHalfWord &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ed]"></a>USBH_SendHalfWord</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_SendHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBH_SendHalfWord &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendDataProcess
</UL>

<P><STRONG><a name="[2d7]"></a>USBH_SetAddress</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[2d9]"></a>USBH_SetCfg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_stdreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[32]"></a>USBH_USR_Configuration_DescAvailable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_Configuration_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_Configuration_DescAvailable &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBH_USR_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>USBH_USR_DeviceAddressAssigned</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceAddressAssigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeviceAddressAssigned &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>USBH_USR_DeviceAttached</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_usr.o(i.USBH_USR_DeviceAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_USR_DeviceAttached &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>USBH_USR_DeviceDisconnected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeviceDisconnected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>USBH_USR_DeviceNotSupported</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeviceNotSupported &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>USBH_USR_DeviceSpeedDetected</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_DeviceSpeedDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_DeviceSpeedDetected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>USBH_USR_Device_DescAvailable</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, usbh_usr.o(i.USBH_USR_Device_DescAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_USR_Device_DescAvailable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>USBH_USR_EnumerationDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_EnumerationDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_EnumerationDone &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBH_USR_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_USR_Init &rArr; STM_EVAL_PBInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_PBInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>USBH_USR_Manufacturer_String</STRONG> (Thumb, 28 bytes, Stack size 112 bytes, usbh_usr.o(i.USBH_USR_Manufacturer_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_USR_Manufacturer_String &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>USBH_USR_OverCurrentDetected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_OverCurrentDetected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>USBH_USR_Product_String</STRONG> (Thumb, 28 bytes, Stack size 112 bytes, usbh_usr.o(i.USBH_USR_Product_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_USR_Product_String &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBH_USR_ResetDevice</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_ResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_ResetDevice &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>USBH_USR_SerialNum_String</STRONG> (Thumb, 28 bytes, Stack size 112 bytes, usbh_usr.o(i.USBH_USR_SerialNum_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_USR_SerialNum_String &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>USBH_USR_UnrecoveredError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_UnrecoveredError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_USR_UnrecoveredError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>USBH_USR_UserInput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(i.USBH_USR_UserInput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[2da]"></a>USB_OTG_BSP_ConfigVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_ConfigVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[2f7]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[2aa]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2a9]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_BSP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[26c]"></a>USB_OTG_BSP_TimerIRQ</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_TimerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_BSP_TimerIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2d8]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[2f0]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[16b]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[16d]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[194]"></a>USB_OTG_CoreInitHost</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_CoreInitHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_OTG_CoreInitHost &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_ConfigVBUS
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
</UL>

<P><STRONG><a name="[16a]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Reconnect
</UL>

<P><STRONG><a name="[2f5]"></a>USB_OTG_DriveVbus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_DriveVbus &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[2ae]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[15a]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[160]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
</UL>

<P><STRONG><a name="[157]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[152]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[150]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_EPDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[15c]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[159]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 288 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[2f3]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableDevInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EnableDevInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[16e]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[2f6]"></a>USB_OTG_EnableHostInt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EnableHostInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EnableHostInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableCommonInt
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[155]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_FlushRxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>

<P><STRONG><a name="[154]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>

<P><STRONG><a name="[2af]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2fd]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[2d0]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>

<P><STRONG><a name="[2db]"></a>USB_OTG_HC_Init</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
</UL>

<P><STRONG><a name="[198]"></a>USB_OTG_HC_StartXfer</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_SubmitRequest
</UL>

<P><STRONG><a name="[2f2]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[2f4]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[2ab]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2cc]"></a>USB_OTG_IsEvenFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsEvenFrame))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Handle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
</UL>

<P><STRONG><a name="[2dc]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ac]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[15f]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[163]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[164]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[2f8]"></a>USB_OTG_ReadHPRT0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHPRT0))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DriveVbus
</UL>

<P><STRONG><a name="[2fa]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[166]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[196]"></a>USB_OTG_ResetPort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHPRT0
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitHost
</UL>

<P><STRONG><a name="[169]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[16c]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_SetCurrentMode &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[21d]"></a>USB_OTG_UngateClock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_UngateClock))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_StartXfer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[1ca]"></a>USR_KEYBRD_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbh_usr.o(i.USR_KEYBRD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USR_KEYBRD_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Init
</UL>

<P><STRONG><a name="[1c9]"></a>USR_KEYBRD_ProcessData</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, usbh_usr.o(i.USR_KEYBRD_ProcessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USR_KEYBRD_ProcessData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Decode
</UL>

<P><STRONG><a name="[1ef]"></a>USR_MOUSE_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_usr.o(i.USR_MOUSE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USR_MOUSE_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Init
</UL>

<P><STRONG><a name="[306]"></a>UartDevice1TimerInterrupt1</STRONG> (Thumb, 5050 bytes, Stack size 144 bytes, usart_sensor.o(i.UartDevice1TimerInterrupt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UartDevice1TimerInterrupt1 &rArr; UsartChange &rArr; usart4_change &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoModetoEstMode
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartChange
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPortSend
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4ReadData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3ReadData
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2ReadData
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ReadData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoIdtoEstId
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToByte4
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>Ultrasonic</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, input.o(i.Ultrasonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ultrasonic &rArr; SetFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFloat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte4ToFloat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[237]"></a>Unregulated_Motor_On</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, outputworkmode.o(i.Unregulated_Motor_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Unregulated_Motor_On &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PowerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
</UL>

<P><STRONG><a name="[6a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32fxxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[307]"></a>UsartChange</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_sensor.o(i.UsartChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UsartChange &rArr; usart4_change &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_change
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_change
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_change
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_change
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[28c]"></a>VS_Set_Vol</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vs10xx.o(i.VS_Set_Vol))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[30f]"></a>VS_WR_Cmd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, vs10xx.o(i.VS_WR_Cmd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_SetSpeed
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>

<P><STRONG><a name="[310]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[313]"></a>W25QXX_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = W25QXX_Init &rArr; SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
</UL>

<P><STRONG><a name="[121]"></a>W25QXX_Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriSound
</UL>

<P><STRONG><a name="[314]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_ReadID &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[315]"></a>W25QXX_ReadSR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[312]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[28d]"></a>W25QXX_Write</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_judge_key
</UL>

<P><STRONG><a name="[311]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[316]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[317]"></a>W25QXX_Write_Page</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[318]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[391]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[19c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCom_DataDecode
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOUSE_Decode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendData
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_UnrecoveredError
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_ResetDevice
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_EnumerationDone
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceSpeedDetected
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceNotSupported
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceDisconnected
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAttached
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeviceAddressAssigned
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_DeInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Configuration_DescAvailable
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Setup
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpAnd_2b
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothAT
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Connect_Check
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_respond
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_judge_key
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooch_waiting
</UL>

<P><STRONG><a name="[392]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[393]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[31a]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[394]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[309]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[395]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[396]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[31b]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[397]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_SerialNum_String
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Product_String
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Manufacturer_String
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_USR_Device_DescAvailable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
</UL>

<P><STRONG><a name="[398]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[399]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[320]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[f0]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acos
</UL>

<P><STRONG><a name="[102]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_asinf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asin
</UL>

<P><STRONG><a name="[104]"></a>__hardfp_atanf</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atan
</UL>

<P><STRONG><a name="[1c6]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inj
</UL>

<P><STRONG><a name="[39a]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[14e]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos
</UL>

<P><STRONG><a name="[184]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exp
</UL>

<P><STRONG><a name="[39b]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[221]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpDjmp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trun
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rej
</UL>

<P><STRONG><a name="[1fb]"></a>__hardfp_fmod</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, fmod.o(i.__hardfp_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
</UL>

<P><STRONG><a name="[1ea]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ln
</UL>

<P><STRONG><a name="[1ec]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
</UL>

<P><STRONG><a name="[23d]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow
</UL>

<P><STRONG><a name="[39c]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[100]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appr
</UL>

<P><STRONG><a name="[260]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin
</UL>

<P><STRONG><a name="[269]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sqrt
</UL>

<P><STRONG><a name="[277]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tan
</UL>

<P><STRONG><a name="[328]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[326]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[325]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[324]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[32c]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[31d]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[32b]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[31f]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[323]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[321]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[322]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[39d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[39e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[39f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[31e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[d7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[332]"></a>blue_break_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bluetooth.o(i.blue_break_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = blue_break_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[285]"></a>bluetooch_waiting</STRONG> (Thumb, 702 bytes, Stack size 40 bytes, bluetooth.o(i.bluetooch_waiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bluetooch_waiting &rArr; LCD_Display_pic &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
</UL>

<P><STRONG><a name="[333]"></a>bluetoothAT</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.bluetoothAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bluetoothAT &rArr; usart6_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[335]"></a>bluetooth_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bluetooth.o(i.bluetooth_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bluetooth_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothAT
</UL>

<P><STRONG><a name="[336]"></a>bluetooth_judge_key</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, bluetooth.o(i.bluetooth_judge_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = bluetooth_judge_key &rArr; UI_Update &rArr; UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_respond
</UL>

<P><STRONG><a name="[29e]"></a>bluetooth_msg</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, bluetooth.o(i.bluetooth_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = bluetooth_msg &rArr; UI_Update &rArr; UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_pic
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Receive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotificationBar
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diffrence_judge
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[28e]"></a>bluetooth_respond</STRONG> (Thumb, 782 bytes, Stack size 48 bytes, bluetooth.o(i.bluetooth_respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = bluetooth_respond &rArr; bluetooth_judge_key &rArr; UI_Update &rArr; UI_Main_Display &rArr; UI_Main_ButtonrRespond &rArr; EnterProgram &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Invert
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_judge_key
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
</UL>

<P><STRONG><a name="[36c]"></a>char_lower</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, myfatfs.o(i.char_lower))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[352]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[33a]"></a>config</STRONG> (Thumb, 762 bytes, Stack size 32 bytes, main.o(i.config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = config &rArr; UI_Control_Init &rArr; scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDInit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc3_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_SetSpeed
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_Set_Vol
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3_GPIO_Init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Control_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_break_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[348]"></a>daisy_Write_Port</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, excutefunction.o(i.daisy_Write_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = daisy_Write_Port &rArr; Large_Motor_OnForRotations &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_On
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForSecond
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForRotations
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_OnForDegrees
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_On
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meduim_Motor_Off
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForSecond
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForRotations
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_OnForDegrees
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Large_Motor_Off
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_daisy_Chain
</UL>

<P><STRONG><a name="[349]"></a>daisy_sensor_control</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, excutefunction.o(i.daisy_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = daisy_sensor_control &rArr; ChangeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_daisy_Chain
</UL>

<P><STRONG><a name="[34a]"></a>deal_daisy_Chain</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, excutefunction.o(i.deal_daisy_Chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = deal_daisy_Chain &rArr; daisy_Write_Port &rArr; Large_Motor_OnForRotations &rArr; Motor_OnForDegrees &rArr; Motor_PowerSet &rArr; Motor_DirectionSet
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveReply_DControl_Packet
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_sensor_control
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daisy_Write_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vs10xx.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
</UL>

<P><STRONG><a name="[2bc]"></a>delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Check_EnumeDead
</UL>

<P><STRONG><a name="[34b]"></a>delay_xms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_xms))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[296]"></a>diffrence_judge</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bluetooth.o(i.diffrence_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = diffrence_judge &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetooth_msg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_connecting_BluetoothRespond
</UL>

<P><STRONG><a name="[34d]"></a>dir_sdi</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[358]"></a>disk_initialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = disk_initialize &rArr; W25QXX_Init &rArr; SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[367]"></a>disk_ioctl</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[359]"></a>disk_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disk_read &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[36e]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[35a]"></a>disk_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[118]"></a>f_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToFlash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndProgram
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriSound
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[134]"></a>f_closedir</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
</UL>

<P><STRONG><a name="[286]"></a>f_deldir</STRONG> (Thumb, 156 bytes, Stack size 608 bytes, myfatfs.o(i.f_deldir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + In Cycle
<LI>Call Chain = f_deldir &rArr;  f_deldir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_ButtonRespond
</UL>

<P><STRONG><a name="[35e]"></a>f_getfree</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
</UL>

<P><STRONG><a name="[267]"></a>f_lseek</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
</UL>

<P><STRONG><a name="[133]"></a>f_mkdir</STRONG> (Thumb, 350 bytes, Stack size 608 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
</UL>

<P><STRONG><a name="[28f]"></a>f_mkfs</STRONG> (Thumb, 1380 bytes, Stack size 72 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[290]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[116]"></a>f_open</STRONG> (Thumb, 322 bytes, Stack size 624 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToFlash
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriSound
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[132]"></a>f_opendir</STRONG> (Thumb, 104 bytes, Stack size 544 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
</UL>

<P><STRONG><a name="[117]"></a>f_read</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterProgram
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BriDisplay
</UL>

<P><STRONG><a name="[35d]"></a>f_readdir</STRONG> (Thumb, 90 bytes, Stack size 544 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
</UL>

<P><STRONG><a name="[36a]"></a>f_rename</STRONG> (Thumb, 270 bytes, Stack size 656 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
</UL>

<P><STRONG><a name="[35b]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[36b]"></a>f_typetell</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, myfatfs.o(i.f_typetell))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_typetell &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_lower
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[143]"></a>f_unlink</STRONG> (Thumb, 170 bytes, Stack size 616 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_deldir
</UL>

<P><STRONG><a name="[141]"></a>f_write</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToFlash
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
</UL>

<P><STRONG><a name="[344]"></a>ff_convert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[347]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[36d]"></a>filetest</STRONG> (Thumb, 1824 bytes, Stack size 56 bytes, myfatfs.o(i.filetest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = filetest &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_showfree
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[268]"></a>flush_buffer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vs10xx.o(i.flush_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flush_buffer &rArr; MYDMA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
</UL>

<P><STRONG><a name="[33b]"></a>font_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, text.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = font_init &rArr; W25QXX_Init &rArr; SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[c8]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart6.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[231]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[240]"></a>fupd_prog</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, uc1638c.o(i.fupd_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fupd_prog &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramToUpdateFlash
</UL>

<P><STRONG><a name="[341]"></a>get_fat</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[361]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[13c]"></a>iap_Func</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, iap.o(i.iap_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iap_Func &rArr; Test_Write &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
</UL>

<P><STRONG><a name="[36f]"></a>iicDevice1TimerInterrupt1</STRONG> (Thumb, 1994 bytes, Stack size 80 bytes, iic_sensor.o(i.iicDevice1TimerInterrupt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = iicDevice1TimerInterrupt1 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicPortSend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicPortReceive
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoModetoEstMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LegoIdtoEstId
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToByte4
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26a]"></a>iic_flag_handler</STRONG> (Thumb, 666 bytes, Stack size 36 bytes, iic_sensor.o(i.iic_flag_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iic_flag_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSdaOut
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSdaIn
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSda
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicScl
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicReadSda
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>iic_send</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, uc1638c.o(i.iic_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iic_send
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uc1638c_Addr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>

<P><STRONG><a name="[1db]"></a>iic_start</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, uc1638c.o(i.iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iic_start
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uc1638c_Addr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>

<P><STRONG><a name="[1dd]"></a>iic_stop</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uc1638c.o(i.iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uc1638c_Addr
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>

<P><STRONG><a name="[1d8]"></a>initialize</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, uc1638c.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = initialize &rArr; iic_send
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UC1638C_Init
</UL>

<P><STRONG><a name="[139]"></a>inversion_file_load</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, myfatfs.o(i.inversion_file_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inversion_file_load
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Control_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_ButtonRespond
</UL>

<P><STRONG><a name="[329]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[c1]"></a>main</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = main &rArr; CheckOrder &rArr; ProgramToUpdateFlash &rArr; fupd_prog &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameOrFlashBuffLoseCheck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SendDataProcess
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SumAngleProcess
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CurrentPowerProcess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADC3AverageValue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device3TimerInterrupt1
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorRunTime_Check
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelMotorCheck
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ButtonrRespond
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothAT
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Connect_Check
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConnectionCheck
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleephandle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightControl
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Movement
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_daisy_Chain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[22b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpWrite_Port
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpRead_Port
</UL>

<P><STRONG><a name="[25c]"></a>mf_showfree</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, myfatfs.o(i.mf_showfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mf_showfree &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_System_Source
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_Display
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Test
</UL>

<P><STRONG><a name="[1d5]"></a>mypow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uc1638c.o(i.mypow))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[342]"></a>put_fat</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[144]"></a>scan_all_files</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, myfatfs.o(i.scan_all_files))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + In Cycle
<LI>Call Chain = scan_all_files &rArr;  scan_all_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_all_files
</UL>

<P><STRONG><a name="[138]"></a>scan_files</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, myfatfs.o(i.scan_files))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + In Cycle
<LI>Call Chain = scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOrder
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filetest
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Sub_ButtonrRespond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Main_ButtonrRespond
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Control_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Confirm_ButtonRespond
</UL>

<P><STRONG><a name="[1da]"></a>set_uc1638c_Addr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uc1638c.o(i.set_uc1638c_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_uc1638c_Addr &rArr; iic_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_refresh
</UL>

<P><STRONG><a name="[31c]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[33f]"></a>uart4_init</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, uart4.o(i.uart4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart4_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[30e]"></a>usart1_change</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, usart1.o(i.usart1_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usart1_change &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartChange
</UL>

<P><STRONG><a name="[33c]"></a>usart1_init</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, usart1.o(i.usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[30d]"></a>usart2_change</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, usart2.o(i.usart2_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usart2_change &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartChange
</UL>

<P><STRONG><a name="[33d]"></a>usart2_init</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, usart2.o(i.usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[30b]"></a>usart3_change</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, usart3.o(i.usart3_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usart3_change &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartChange
</UL>

<P><STRONG><a name="[33e]"></a>usart3_init</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, usart3.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
</UL>

<P><STRONG><a name="[30c]"></a>usart4_change</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, uart4.o(i.usart4_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usart4_change &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartChange
</UL>

<P><STRONG><a name="[334]"></a>usart6_init</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, usart6.o(i.usart6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart6_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothAT
</UL>

<P><STRONG><a name="[210]"></a>wr_command</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vs10xx.o(i.wr_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wr_command &rArr; SPI3_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a5]"></a>IOE_DMA_Config</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, stm324xg_eval_ioe.o(i.IOE_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = IOE_DMA_Config &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDeviceRegister
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDeviceRegister
</UL>

<P><STRONG><a name="[1b3]"></a>IOE_GPIO_Config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm324xg_eval_ioe.o(i.IOE_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IOE_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Config
</UL>

<P><STRONG><a name="[1c2]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm324xg_eval_ioe.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_TS_Config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Reset
</UL>

<P><STRONG><a name="[26b]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2d5]"></a>USBH_HandleEnum</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_CfgDesc &rArr; USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Modify_Channel
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[2c9]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, usbh_stdreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[2e6]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_stdreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[d]"></a>USBH_HID_ClassRequest</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, usbh_hid_core.o(i.USBH_HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_HID_ClassRequest &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBH_HID_Handle</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, usbh_hid_core.o(i.USBH_HID_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_HID_Handle &rArr; USBH_InterruptReceiveData &rArr; HCD_SubmitRequest &rArr; USB_OTG_HC_StartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetURB_State
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_GetCurrentFrame
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsEvenFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBH_HID_InterfaceDeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbh_hid_core.o(i.USBH_HID_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_HID_InterfaceDeInit &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Free_Channel
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBH_HID_InterfaceInit</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, usbh_hid_core.o(i.USBH_HID_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_HID_InterfaceInit &rArr; USBH_Open_Channel &rArr; USB_OTG_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Open_Channel
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Alloc_Channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_core.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>KEYBRD_Decode</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, usbh_hid_keybd.o(i.KEYBRD_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KEYBRD_Decode &rArr; USR_KEYBRD_ProcessData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_ProcessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>KEYBRD_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_hid_keybd.o(i.KEYBRD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEYBRD_Init &rArr; USR_KEYBRD_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_KEYBRD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_keybd.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>MOUSE_Decode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_hid_mouse.o(i.MOUSE_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MOUSE_Decode &rArr; HostCom_DataDecode &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostCom_DataDecode
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>MOUSE_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_hid_mouse.o(i.MOUSE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOUSE_Init &rArr; USR_MOUSE_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USR_MOUSE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid_mouse.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_DataInStage</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_DataOutStage</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_Resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_SOF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_SetupStage</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_SetupStage &rArr; USBD_ParseSetupRequest &rArr; SlaveCom_DataDecode &rArr; SlaveReply_SortUpdate_Packet &rArr; HID_SendBuffToHost &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_Suspend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2a7]"></a>USBD_GetDescriptor</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2b1]"></a>USBD_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2b4]"></a>USBD_SetFeature</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1f]"></a>USBD_HID_DataIn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_hid_core.o(i.USBD_HID_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_HID_DataIn &rArr; DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_core.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_HID_DataOut</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, usbd_hid_core.o(i.USBD_HID_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_HID_DataOut &rArr; DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOn
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_EVAL_LEDOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_HID_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_hid_core.o(i.USBD_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_HID_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_core.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_HID_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_hid_core.o(i.USBD_HID_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_HID_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_hid_core.o(i.USBD_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_HID_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_core.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_HID_Setup</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbd_hid_core.o(i.USBD_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_HID_Setup &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid_core.o(.data)
</UL>
<P><STRONG><a name="[2f1]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USB_OTG_CoreReset &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[2f9]"></a>USB_OTG_EnableCommonInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EnableCommonInt))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableHostInt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>

<P><STRONG><a name="[15e]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[162]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleOutEP_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[165]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2ad]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[167]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo &rArr; USB_OTG_BSP_uDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[161]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[2e3]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2e4]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2e1]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2fb]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[2fc]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 976 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[2df]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2e2]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_ResetPort &rArr; USB_OTG_BSP_mDelay &rArr; BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ResetPort
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2e0]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2de]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[2dd]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[105]"></a>BSP_Delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_bsp.o(i.BSP_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_Delay &rArr; BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>

<P><STRONG><a name="[106]"></a>BSP_SetTime</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_bsp.o(i.BSP_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_SetTime &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[2ff]"></a>Uart1Read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart_sensor.o(i.Uart1Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ReadData
</UL>

<P><STRONG><a name="[2fe]"></a>Uart1ReadData</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, usart_sensor.o(i.Uart1ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart1ReadData &rArr; Uart1Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[301]"></a>Uart2Read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart_sensor.o(i.Uart2Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart2Read
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2ReadData
</UL>

<P><STRONG><a name="[300]"></a>Uart2ReadData</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, usart_sensor.o(i.Uart2ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart2ReadData &rArr; Uart2Read
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[303]"></a>Uart3Read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart_sensor.o(i.Uart3Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3ReadData
</UL>

<P><STRONG><a name="[302]"></a>Uart3ReadData</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, usart_sensor.o(i.Uart3ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart3ReadData &rArr; Uart3Read
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[305]"></a>Uart4Read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart_sensor.o(i.Uart4Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart4Read
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4ReadData
</UL>

<P><STRONG><a name="[304]"></a>Uart4ReadData</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, usart_sensor.o(i.Uart4ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart4ReadData &rArr; Uart4Read
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[30a]"></a>UartPortSend</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usart_sensor.o(i.UartPortSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartPortSend &rArr; USART1_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Byte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Send_Byte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[308]"></a>UartRead</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usart_sensor.o(i.UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartRead &rArr; Uart4Read
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Read
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3Read
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Read
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[1c3]"></a>IicPortReceive</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iic_sensor.o(i.IicPortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IicPortReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iicDevice1TimerInterrupt1
</UL>

<P><STRONG><a name="[338]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[345]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[360]"></a>clmt_clust</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[340]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[343]"></a>create_name</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[34c]"></a>dir_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34f]"></a>dir_find</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[34e]"></a>dir_next</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[353]"></a>dir_read</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[354]"></a>dir_register</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[357]"></a>dir_remove</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[35f]"></a>find_volume</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[362]"></a>follow_path</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[356]"></a>gen_numname</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[369]"></a>get_fileinfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[366]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[368]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[355]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[346]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[339]"></a>move_window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[364]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[363]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[350]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[365]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[351]"></a>sync_window</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[35c]"></a>validate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[265]"></a>NVIC_SystemReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleephandle
</UL>

<P><STRONG><a name="[32d]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[319]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[330]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c9]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[ca]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[d2]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[c6]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
